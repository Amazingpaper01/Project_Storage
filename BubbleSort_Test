#include <iostream>
#include <time.h>
using namespace std;

void bubbleSort(int arr[], int n) {
    if (n == 0 || n == 1) {
        return;
    }

    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

void sortedArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        arr[i] = i;
    }
}

void reversedArray(int arr[], int n) {
    int x = n - 1;

    for (int i = 0; i < n; i++) {
        arr[i] = x;
        x--;
    }
}

void randomArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        arr[i] = rand() % n;
    }
}

void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    int array[100000];
    float TimeSpent = 0.0;

    int x;
    cout << "Enter array size (100,000 max): ";
    cin >> x;
    cout << endl;

    int choice;
    cout << "1. Sorted Array (0 to size-1)" << endl << "2. Reversed Array (size-1 to 0)" << endl << "3. Random Array (Random Elements from 0 to size-1)" << endl;
    cout << "Enter from 1-3: ";
    cin >> choice;
    cout << endl;
    
    if (choice == 1) {
        sortedArray(array, x);
        cout << "Current Array with size of " << x << " :" << endl;
        printArray(array, x);
    }
    else if (choice == 2) {
        reversedArray(array, x);
        cout << "Current Array with size of " << x << " :" << endl;        
        printArray(array, x);
    }
    else if (choice == 3) {
        randomArray(array, x);
        cout << "Current Array with size of " << x << " :" << endl;        
        printArray(array, x);
    }
    else {
        cout << "Invalid choice" << endl;
        return 0;
    }

    cout << endl << "Using Bubble Sort: " << endl;
    clock_t Begin = clock();
    bubbleSort(array, x);
    clock_t End = clock();

    printArray(array, x);
    
    TimeSpent += (double)(End - Begin) / CLOCKS_PER_SEC;
    cout << endl << "The elapsed time is " << fixed << TimeSpent << " seconds" << endl;

    return 0;
}
