#include <iostream>
#include <chrono>

using namespace std;
using namespace std::chrono;

void build_S_List(int arr[], int size)      //Builds sorted list (best case)
{
    for (int i = 1; i <= size; i++)
    {
        arr[i - 1] = i;
    }
}

void build_Rand_List(int arr[], int size)     //Builds random list (average case)
{
    for (int i = 0; i < size; i++) {
        arr[i] = rand() % size;
    }
}

void build_R_List(int arr[], int size)      //Builds reversed list (worst case)
{
    int j = 0;
    for (int i = size; i >= 1; i--)
    {
        arr[j] = i;
        j++;
    }
}

void selSort(int arr[], int size)       //Selection sort algorithm
{
    int i;
    int min;
    int temp;
    for (i = 0; i < size - 1; i++)
    {
        min = i;
        for (int j = i + 1; j < size; j++)
        {
            if (arr[j] < arr[min])
            {
                min = j;
            }
        }
        temp = arr[i];
        arr[i] = arr[min];
        arr[min] = temp;
    }
}

void printList(int arr[], int size)     //Print function for testing
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << " ";
    }
    cout << endl;
}
int main()
{
    srand(time(NULL));

    for (int size = 100; size < 1000000; size *= 10) {     //Loop which grows input size by factor of 10 for each iteration.

        cout << "Using Selection sort with lists of " << size << " elements" << endl << endl;

        int* sorted = new int[size];                        //Creates array.
        build_S_List(sorted, size);                         //Builds list to fill array.
        cout << "List is sorted: ";
        auto sorted_start = high_resolution_clock::now();
        selSort(sorted, size);                              //Calls selection sort.
        auto sorted_stop = high_resolution_clock::now();
        auto sorted_duration = duration_cast<milliseconds>(sorted_stop - sorted_start);     //Records and outputs running time.
        cout << sorted_duration.count() << " millisecond(s)" << endl;
        delete[] sorted;

        int* rand_sorted = new int[size];
        build_Rand_List(rand_sorted, size);
        cout << "List is random: ";
        auto rand_sorted_start = high_resolution_clock::now();
        selSort(rand_sorted, size);
        auto rand_sorted_stop = high_resolution_clock::now();
        auto rand_sorted_duration = duration_cast<milliseconds>(rand_sorted_stop - rand_sorted_start);
        cout << rand_sorted_duration.count() << " millisecond(s)" << endl;
        delete[] rand_sorted;

        int* reversed = new int[size];
        build_R_List(reversed, size);
        cout << "List is reversed: ";
        auto reversed_start = high_resolution_clock::now();
        selSort(reversed, size);
        auto reversed_stop = high_resolution_clock::now();
        auto reversed_duration = duration_cast<milliseconds>(reversed_stop - reversed_start);
        cout << reversed_duration.count() << " millisecond(s)" << endl;
        delete[] reversed;

        cout << endl;

    }

    char quit = '\0';

    while (!quit) {
        cout <<  "Enter any key to quit: ";
        cin >> quit;
    }

    return 0;
}
